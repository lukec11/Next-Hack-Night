{"version":3,"sources":["../src/app.js"],"names":["process","env","BOT_USER_ID","PORT","slackEvents","on","event","hasOwnProperty","username","includes","console","debug","subtype","user","channel","ts","text","match","forceTopicUpdateRegex","hackNightRegex","error","start","then","log"],"mappings":";;;;;;;;AACA;;AAGA;;AAJA;;AAGA;;AAOA;mBAC8BA,OAAO,CAACC,G;IAA9BC,W,gBAAAA,W;IAAaC,I,gBAAAA,I;AAErB;;;;AAGAC,uBAAYC,EAAZ,CAAe,SAAf;AAAA,2FAA0B,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAGlBA,KAAK,CAACC,cAAN,CAAqB,UAArB,CAHkB;AAAA;AAAA;AAAA;;AAAA,iBAIhBD,KAAK,CAACE,QAAN,CAAeC,QAAf,CAAwB,aAAxB,CAJgB;AAAA;AAAA;AAAA;;AAKlBC,YAAAA,OAAO,CAACC,KAAR,CAAc,kBAAd;AALkB;;AAAA;AAAA,iBAWlBL,KAAK,CAACC,cAAN,CAAqB,SAArB,CAXkB;AAAA;AAAA;AAAA;;AAAA,kBAYhBD,KAAK,CAACM,OAAN,MAAmB,mBAAmB,aAAtC,CAZgB;AAAA;AAAA;AAAA;;AAAA,kBAcdN,KAAK,CAACO,IAAN,KAAeX,WAdD;AAAA;AAAA;AAAA;;AAehBQ,YAAAA,OAAO,CAACC,KAAR,CAAc,8CAAd;AAfgB;AAAA,mBAgBV,0BAAcL,KAAK,CAACQ,OAApB,EAA6BR,KAAK,CAACS,EAAnC,CAhBU;;AAAA;AAAA;;AAAA;AAmBlBL,YAAAA,OAAO,CAACC,KAAR,CAAc,2CAAd;AAnBkB;;AAAA;AAAA,kBAsBhBL,KAAK,CAACM,OAAN,MAAmB,qBAAqB,gBAAxC,CAtBgB;AAAA;AAAA;AAAA;;AAuBlBF,YAAAA,OAAO,CAACC,KAAR,CAAc,6CAAd;AAvBkB;;AAAA;AAAA,iBA6BlBL,KAAK,CAACU,IAAN,CAAWC,KAAX,CAAiBC,gCAAjB,CA7BkB;AAAA;AAAA;AAAA;;AA8BpBR,YAAAA,OAAO,CAACC,KAAR,CAAc,4BAAd;AA9BoB;AAAA,mBA+Bd,6BAAiBL,KAAjB,CA/Bc;;AAAA;AAAA,iBAmClBA,KAAK,CAACU,IAAN,CAAWC,KAAX,CAAiBE,yBAAjB,CAnCkB;AAAA;AAAA;AAAA;;AAoCpBT,YAAAA,OAAO,CAACC,KAAR,CAAc,6BAAd;AApCoB;AAAA,mBAqCd,2BAAeL,KAAf,CArCc;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwCtBI,YAAAA,OAAO,CAACU,KAAR;;AAxCsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;AA4CA;;;;;AAGAhB,uBAAYC,EAAZ,CAAe,OAAf,EAAwBK,OAAO,CAACU,KAAhC;AAEA;;;;;AAGAhB,uBAAYiB,KAAZ,CAAkBlB,IAAlB,EAAwBmB,IAAxB,CAA6B,YAAM;AACjCZ,EAAAA,OAAO,CAACa,GAAR,wBAA4BpB,IAA5B;AACD,CAFD","sourcesContent":["/* Bring in utils */\nimport { deleteMessage, checkTopicUpdate, genTimeMessage } from './utils.js';\n\n/* Bring in constants */\nimport {\n  slackEvents,\n  forceTopicUpdateRegex,\n  hackNightRegex\n} from './constants.js';\n\n/* Bring in env vars */\nconst { BOT_USER_ID, PORT } = process.env;\n\n/**\n * Listens for incoming messages with the correct keyword trigger.\n */\nslackEvents.on('message', async (event) => {\n  try {\n    /* Check if it's the zap golem and ignore it */\n    if (event.hasOwnProperty('username')) {\n      if (event.username.includes('Night Golem')) {\n        console.debug('Found zap golem!');\n        return;\n      }\n    }\n\n    /* Don't respond to messages setting channel/group topic */\n    if (event.hasOwnProperty('subtype')) {\n      if (event.subtype === ('channel_topic' || 'group_topic')) {\n        /* If it's night golem's topic, delete it. */\n        if (event.user === BOT_USER_ID) {\n          console.debug('Found golem channel topic message, deleting!');\n          await deleteMessage(event.channel, event.ts);\n          return;\n        }\n        console.debug('Not responding to a topic change message.');\n        return;\n      }\n      if (event.subtype === ('message_deleted' || 'message_edited')) {\n        console.debug('Not responding to an edited/deleted message');\n        return;\n      }\n    }\n\n    /* Check for channel topic update requests */\n    if (event.text.match(forceTopicUpdateRegex)) {\n      console.debug('Updating the channel topic');\n      await checkTopicUpdate(event);\n    }\n\n    /* Check for message time request logic */\n    if (event.text.match(hackNightRegex)) {\n      console.debug('Generating Response Message');\n      await genTimeMessage(event);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n});\n\n/**\n * Listens for errors from slack and send to console\n */\nslackEvents.on('error', console.error);\n\n/**\n * Run the server\n */\nslackEvents.start(PORT).then(() => {\n  console.log(`listening on ${PORT}!`);\n});\n"],"file":"app.js"}