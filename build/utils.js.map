{"version":3,"sources":["../src/utils.js"],"names":["require","config","process","env","SLACK_TOKEN","ADMIN_TOKEN","EASTER_EGG","HACK_NIGHT_CHANNEL","inRange","n","start","end","setTime","date","hours","minutes","seconds","setHours","setMinutes","setSeconds","getSeconds","ts","getTime","toFixed","happeningNow","now","Date","day","getDay","getHours","getMinutes","nextDate","d","today","setDate","getDate","sendPublicReply","event","message","wc","chat","postMessage","channel","token","text","thread_ts","console","error","sendReaction","reaction","reactions","add","name","timestamp","setTopic","conversations","topic","deleteMessage","checkBan","textMatch","hackNightRegex","exec","bannedCombos","includes","toLowerCase","debug","user","checkTopicUpdate","nextHackNight","titleCase","str","split","i","length","charAt","toUpperCase","substring","join","err","genTimeMessage","match"],"mappings":"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","sourcesContent":["require('dotenv').config();\n\n/* Pull in constants */\nimport { wc, bannedCombos, hackNightRegex } from './constants.js';\n\n/* Pull env vars */\nconst {\n  SLACK_TOKEN,\n  ADMIN_TOKEN,\n  EASTER_EGG,\n  HACK_NIGHT_CHANNEL\n} = process.env;\n\n/**\n * Checks whether $n is between $start and $end, inclusive.\n * @param {int} n - number to compare\n * @param {int} start - minimum possible value\n * @param {int} end - maximum possible value\n */\nconst inRange = (n, start, end) => {\n  return (n - start) * (n - end) <= 0;\n};\n\n/**\n * Sets the time of $date with the values of $hours, $minutes, and $seconds\n * @param {Date} date - Date to set\n * @param {int} hours\n * @param {int} minutes\n * @param {int} seconds\n */\nconst setTime = (date, hours, minutes, seconds) => {\n  date.setHours(hours);\n  date.setMinutes(minutes);\n  date.setSeconds(seconds);\n  return date;\n};\n\n/**\n * Takes a Date and returns a unix timestamp in seconds.\n * @param {Date} ts - the Date object\n */\nconst getSeconds = (ts) => {\n  return (ts.getTime() / 1000).toFixed(0);\n};\n\n/**\n * Check if there is currently a hack night in progress.\n */\nconst happeningNow = () => {\n  const now = new Date();\n  const day = now.getDay();\n  const hours = now.getHours();\n  const minutes = now.getMinutes();\n\n  /* Check if today is wednesday */\n  if (day === 3) {\n    /* Check if current time is between 15:30 and 23:59 Eastern */\n    if (\n      (hours > 15 || (hours == 15 && minutes >= 30)) &&\n      (hours < 23 || (hours == 23 && minutes <= 59))\n    ) {\n      return true;\n    }\n  }\n\n  /* Check if today is Saturday */\n  if (day === 6) {\n    /* Check if current time is between 20:30 and 23:59 */\n    if (\n      (hours > 20 || (hours == 20 && minutes >= 30)) &&\n      (hours < 23 || (hours == 23 && minutes <= 59))\n    ) {\n      return true;\n    }\n  }\n\n  /* It's neither of these, so we'll return false. */\n  return false;\n};\n\n/**\n * Gathers the date of the next hack night.\n */\nconst nextDate = () => {\n  const d = new Date();\n  const today = new Date(Date.now()).getDay();\n\n  /* Today is Sun - Wed */\n  if (inRange(today, 0, 3)) {\n    d.setDate(d.getDate() + ((3 + 7 - d.getDay()) % 7)); // Sets to date of the next Wednesday\n    setTime(d, 15, 30, 0); // Sets time to 15:30 Eastern\n  } else if (inRange(today, 4, 6)) {\n    /* Today is Thu - Sat */\n    d.setDate(d.getDate() + ((6 + 7 - d.getDay()) % 7)); // Sets to date of the next Saturday\n    setTime(d, 20, 30, 0); // Sets time to 20:30 Eastern\n  }\n  return getSeconds(d); // returns date in unix seconds (the correct format for slack)\n};\n\n/**\n * Sends a public reply with the content $message.\n * @param {Event} event - the event recieved from slack\n * @param {String} message - the message you wish to return to the channel\n */\nconst sendPublicReply = async (event, message) => {\n  try {\n    await wc.chat.postMessage({\n      channel: event.channel,\n      token: SLACK_TOKEN,\n      text: message,\n      thread_ts: event.ts\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n/**\n * Send an emote reaction\n * @param {Event} event - the received slack event\n * @param {String} reaction - the reaction you would like sent as a response\n */\nconst sendReaction = async (event, reaction) => {\n  try {\n    await wc.reactions.add({\n      token: SLACK_TOKEN,\n      channel: event.channel,\n      name: reaction,\n      timestamp: event.ts\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n/**\n * Sets the topic of a channel\n * @param {String} channel - the channel the topic should be set for\n * @param {String} text - the text of the topic, including (potentially unsupported) formatting\n */\nconst setTopic = async (channel, text) => {\n  try {\n    await wc.conversations.setTopic({\n      token: SLACK_TOKEN,\n      channel: channel,\n      topic: text\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n/**\n * Deletes a message based on channel and ts\n * @param {String} channel - channel of the message\n * @param {String} ts - full timestamp of the message\n */\nexport const deleteMessage = async (channel, ts) => {\n  try {\n    await wc.chat.delete({\n      token: ADMIN_TOKEN,\n      channel: channel,\n      ts: ts\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst checkBan = async (event) => {\n  try {\n    let textMatch = hackNightRegex.exec(event.text);\n    if (bannedCombos.includes(textMatch[1].toLowerCase())) {\n      console.debug(\n        `Refusing response to ${event.user} for ${event.text} in ${event.channel}.`\n      );\n      await sendPublicReply(\n        event,\n        `<@${event.user}>, let's keep this space friendly.`\n      );\n      return true;\n    }\n    /* Otherwise, return false. */\n    return false;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n/**\n * Checks an event to see if it was a channel topic update request\n * @param {Event} event\n */\nexport const checkTopicUpdate = async (event) => {\n  try {\n    let topic;\n    /* Check if Hack Night is currently happening */\n    if (happeningNow()) {\n      topic = `Hack Night is happening _*right now*_! :fastparrot: <https://hack.af/night|Join the fun> — Meet some new people, build something cool, talk about it! :tada:`;\n    } else {\n      /* It's not happening right now, so set to the next possible date. */\n      const nextHackNight = nextDate();\n      topic = `:clock4: The next <https://hackclub.com/night|Hack Night> is *<!date^${nextHackNight}^{date_short_pretty} at {time}|date>* your time. :pencil: At the last call? <https://hack.af/night|Fill out the survey>... :wave: See you soon!`;\n    }\n\n    await setTopic(HACK_NIGHT_CHANNEL, topic);\n    await sendReaction(event, 'heavy_check_mark');\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n/**\n * Turns text title case\n * @param {String} str | String to make Title Case\n */\nconst titleCase = (str) => {\n  try {\n    let split = str.toLowerCase().split(' ');\n    for (let i = 0; i < split.length; i++) {\n      split[i] = split[i].charAt(0).toUpperCase() + split[i].substring(1);\n    }\n    return split.join(' ');\n  } catch (err) {\n    console.error('Somehow, you fucked up the most basic function in here.');\n    console.error(err);\n  }\n};\n\n/**\n * Generates a message to reply to a user\n * @param {Event} event | A slack 'message' event to reply to\n */\nexport const genTimeMessage = async (event) => {\n  try {\n    /* Check if this includes banned keywords */\n    if (await checkBan(event)) {\n      return;\n    }\n\n    let message;\n    let textMatch = event.text.match(hackNightRegex);\n\n    if (happeningNow()) {\n      message = `_${titleCase(\n        textMatch[1]\n      )}_ is happening right now, what are you still doing here!? <https://hack.af/night|Join the call!>`;\n    } else {\n      const nextHackNight = nextDate();\n      message = `The next _${textMatch[1]}_ is *<!date^${nextHackNight}^{date_short_pretty} at {time}|${EASTER_EGG}>* your time. See you there!`;\n    }\n    await sendPublicReply(event, message);\n  } catch (err) {\n    console.error(err);\n  }\n};\n"],"file":"utils.js"}